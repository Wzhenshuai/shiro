<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">
    <!--========================================静态资源==============================================-->
    <mvc:resources mapping="/js/**" location="/js/"></mvc:resources>
    <mvc:resources mapping="/images/**" location="/images/"></mvc:resources><!--访问images.xxx的时候从/images/路径下面获得数据-->
    <mvc:resources mapping="/style/**" location="/styles/"></mvc:resources>
    <!--========================================拦截器mvc:interceptors============================================-->
    <!--多个拦截  顺序执行-->
   <!-- <mvc:interceptors>
        &lt;!&ndash;判断用户是否登录&ndash;&gt;
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.hh.interceptor.LoginInterceptor"></bean>
        </mvc:interceptor>
        &lt;!&ndash;-用户授权权限拦截器&ndash;&gt;
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.hh.interceptor.SysPermissionInterceptor"></bean>
        </mvc:interceptor>

    </mvc:interceptors>-->
    <!--组件扫描-->
    <!-- 所以配置了<context:component-scan base-package="">之后,便无需再配置<context:annotation-config>-->
     <context:component-scan base-package="com.hh"></context:component-scan>

    <!-- 启用SpringMVC的注解功能,它会自动注册HandlerMapping、HandlerAdapter、ExceptionResolver的相关实例 -->
   <mvc:annotation-driven/>
    <!--注解驱动-->
   <!-- <mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>--><!--对应下面的转化器-->
 <!--   意思是访问"/"重定向到toLogin-->
    <mvc:view-controller path="/" view-name="redirect:/toLogin"/>
    <!--视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/pages/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!--定义统一异常处理  抛出异常要进行的处理  这里与spring的异常处理只能二选一 -->
    <!--<bean id="myException" class="com.hh.Exception.MyExceptionHandler"/>-->
    <!--============================================对异常进行处理===========================================-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!-- 定义异常处理页面用来获取异常信息的变量名，默认名为exception -->
        <property name="exceptionAttribute" value="ex"></property>
        <!-- 定义需要特殊处理的异常，用类名或完全路径名作为key，异常也页名作为值 -->
        <property name="exceptionMappings">
            <props>
              <prop key="java.lang.NullPointerException">err</prop>
              <prop key="com.hh.Exception.CustomException">err</prop>
              <prop key="org.apache.shiro.authz.UnauthorizedException">refuse</prop><!--refush是页面  springmvc扫描的是pags/jsp下**.jsp的页面-->
                <!-- 这里还可以继续扩展对不同异常类型的处理 -->
            </props>
        </property>
        <!-- 设置日志输出级别，不定义则默认不输出警告等错误日志信息 -->
        <property name="warnLogCategory" value="WARN"></property>
        <!-- 默认错误页面，当找不到上面mappings中指定的异常对应视图时，使用本默认配置 -->
         <property name="defaultErrorView" value="err"></property>
        <!-- 默认HTTP状态码 -->
          <property name="defaultStatusCode" value="500"></property>
    </bean>
    <!--============================================转换器  ====================================================== -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--转换器  -->
        <property name="converters">
            <set>
                <bean class="com.hh.controller.converter.CustomDateConverter"/>
            </set>
        </property>
    </bean>
    <!-- ========================================shrio 否则类中使用shiro注解进行权限判定无效=========================================================== -->
    <!-- 开启aop，对类代理 -->
    <aop:config proxy-target-class="true"></aop:config>
    <!-- 开启shiro注解支持 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
    <!-- ========================================文件上传======================================================== -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为5MB -->
        <property name="maxUploadSize">
            <value>5242880</value>
        </property>
    </bean>



</beans>